pipeline
{
  agent any
  tools{
    maven 'Maven'
  }
  stages{
    stage('Clean Workspace') {
            steps {
                deleteDir()
            }
      }
    stage ('Initialize') {
      steps{
        sh '''
              echo "PATH =${PATH}"
              echo "M2_HOME =${M2_HOME}"
           '''
        
      }
    }
  stage('Retrieve Source Code') {
            steps {
                git branch: 'master', url: 'https://github.com/chand-infosec/webapp.git'
            }
  }
  stage ('Check Git Secrets') {
      steps{
        sh 'docker pull gesellix/trufflehog'
        sh 'rm trufflehog || true'
        sh 'docker run gesellix/trufflehog --json https://github.com/chand-infosec/webapp.git > trufflehog'     
        sh 'cat trufflehog'
      }
    }

  stage ('Source Composition Analysis') {
      steps {
         sh 'rm owasp* || true'
         sh 'wget "https://raw.githubusercontent.com/chand-infosec/webapp/master/owasp-dependency-check.sh" '
         sh 'chmod +x owasp-dependency-check.sh'
         sh 'bash owasp-dependency-check.sh'
         sh 'cat /bitnami/jenkins/home/OWASP-Dependency-Check/reports/dependency-check-report.xml'        
      }
    }

  stage ('SAST') {
      steps {
        withSonarQubeEnv('sonar') {
          sh 'mvn sonar:sonar'
          sh 'cat target/sonar/report-task.txt'
        }
      }
    }

/* stage('Quality Gate') {
    steps {
        script {
            def qualityGate = waitForQualityGate() // Waits for the SonarQube analysis to complete and returns the quality gate status
            if (qualityGate.status != 'OK') {
                error "Quality Gate failed: ${qualityGate.status}"
            }
        }
    }
 }*/

  stage ('Build') {
      steps{
        sh 'mvn clean package'        
      }
    }
  stage('Deploy to tomcat') {
            steps {              
               sshagent(credentials: ['tomcat']) {
                sh 'scp -o StrictHostKeyChecking=no target/*.*ar jenkinsdevsecops@34.125.188.8:/home/jenkinsdevsecops/prod/tomcat/webapps/webapp.war'
          }
      }
  }

  stage('DAST Baseline Scan') {
          steps {
              sshagent(['zap']){
                   sh ''' ssh -o StrictHostKeyChecking=no gcpvmsshuser@130.211.193.19 "docker run -t owasp/zap2docker-stable zap-baseline.py -t http://34.125.188.8:8080/webapp" || true  '''
                   //sh 'ssh -o StrictHostKeyChecking=no gcpvmsshuser@130.211.193.19 "docker run -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable zap-baseline.py -t http://34.125.188.8:8080/webapp/  -g gen.conf -r /zap/wrk/cli-zap-report-testphp.html" '                     
                }
            }
      }

  }
}
